name: CI/CD Pipeline # Name of the GitHub Actions Workflow

# üöÄ Workflow Triggers: Separate Testing & Deployment
on:
  pull_request:
    branches: [main] # Run tests & build when a PR is made to 'main'
  push:
    branches: [main] # Deploy when code is merged into 'main'

jobs:
  # ‚úÖ JOB 1: Run Tests (Backend Only)
  test:
    runs-on: ubuntu-22.04 # Use Ubuntu as the runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Get the latest code from the repo

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # Ensure we're using Node.js 18

      - name: Install MongoDB CLI (Ubuntu 22.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl

          # Correctly Add MongoDB's Updated GPG Key
          curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-keyring.gpg

          # Add MongoDB APT Repository (Official MongoDB Source)
          echo "deb [signed-by=/usr/share/keyrings/mongodb-server-keyring.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

          sudo apt-get update
          sudo apt-get install -y mongodb-org-shell mongodb-mongosh

      - name: Verify MongoDB Installation
        run: |
          mongosh --version
          mongo --version || echo "‚ùå Warning: Legacy MongoDB shell is not installed."

      # üö´ No frontend tests, but keeping the structure for future use
      # - name: Install Frontend Dependencies
      #   run: |
      #     cd client
      #     npm install  # Install frontend dependencies

      # - name: Run Frontend Tests
      #   run: |
      #     cd client
      #     npm test  # Run frontend tests (disabled)

      - name: Install Backend Dependencies # Install backend dependencies
        run: |
          cd Server
          npm install

      - name: Check & Log Environment Variables
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then echo "‚ùå MISSING: JWT_SECRET"; fi
          if [ -z "${{ secrets.PASSWORD_KEY }}" ]; then echo "‚ùå MISSING: PASSWORD_KEY"; fi
          if [ -z "${{ secrets.MONGODB_URI_TEST }}" ]; then echo "‚ùå MISSING: MONGODB_URI_TEST"; fi
          if [ -z "${{ secrets.SMTP_HOST }}" ]; then echo "‚ùå MISSING: SMTP_HOST"; fi
          if [ -z "${{ secrets.SMTP_PORT }}" ]; then echo "‚ùå MISSING: SMTP_PORT"; fi
          if [ -z "${{ secrets.SMTP_USER }}" ]; then echo "‚ùå MISSING: SMTP_USER"; fi
          if [ -z "${{ secrets.SMTP_PASS }}" ]; then echo "‚ùå MISSING: SMTP_PASS"; fi
          if [ -z "${{ secrets.DEVICE_TOKEN_SECRET }}" ]; then echo "‚ùå MISSING: DEVICE_TOKEN_SECRET"; fi
          if [ -z "${{ secrets.ENCRYPTION_KEY }}" ]; then echo "‚ùå MISSING: ENCRYPTION_KEY"; fi

      - name: Set Environment Variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "PASSWORD_KEY=${{ secrets.PASSWORD_KEY }}" >> $GITHUB_ENV
          echo "MONGODB_URI_TEST=${{ secrets.MONGODB_URI_TEST }}" >> $GITHUB_ENV
          echo "SMTP_HOST='${{ secrets.SMTP_HOST }}'" >> $GITHUB_ENV
          echo "SMTP_PORT='${{ secrets.SMTP_PORT }}'" >> $GITHUB_ENV
          echo "SMTP_USER='${{ secrets.SMTP_USER }}'" >> $GITHUB_ENV
          echo "SMTP_PASS='${{ secrets.SMTP_PASS }}'" >> $GITHUB_ENV
          echo "DEVICE_TOKEN_SECRET='${{ secrets.DEVICE_TOKEN_SECRET }}'" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}'" >> $GITHUB_ENV

      - name: Debug MongoDB URI
        run: |
          echo "MongoDB URI: ${MONGODB_URI_TEST:0:20}********"  # Mask for security

      - name: Test MongoDB Connection
        run: |
          echo "Testing MongoDB connection..."
          echo "MongoDB URI: ${MONGODB_URI_TEST:0:20}********"  # Mask for security
          mongosh "$MONGODB_URI_TEST" --eval "db.runCommand({ connectionStatus: 1 })"

      - name: Run Backend Tests # Run backend tests
        run: |
          cd Server
          npm test

  # ‚úÖ JOB 2: Build the Frontend (Acts as a Test)
  build:
    runs-on: ubuntu-latest
    needs: test # Runs only if backend tests pass
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Frontend # Create the production build (output is in 'client/dist')
        run: |
          cd client
          npm run build

  # ‚úÖ JOB 3: Deploy Frontend to S3
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: build # Runs only if build is successful
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Rebuild Frontend # Ensure we have the latest build
        run: |
          cd client
          npm install  # Install dependencies
          npm run build # Build frontend

      - name: Ensure Frontend Build Directory Exists
        run: |
          if [ ! -d "client/dist" ]; then
          echo "‚ùå ERROR: Build directory client/dist does not exist!"
          exit 1
          fi

      - name: Deploy to S3 # Sync the built frontend files to the S3 bucket
        uses: jakejarvis/s3-sync-action@master # AWS S3 sync action
        with:
          args: --delete # Remove old files from S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} # S3 Bucket Name
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret
          AWS_REGION: "eu-central-1" # Change to your AWS region
          SOURCE_DIR: "client/dist/" # Only upload the CONTENTS of client/dist

  # ‚úÖ JOB 4: Deploy Backend to EC2
  deploy_backend:
    runs-on: ubuntu-latest
    needs: build # Runs only if build is successful
    if: github.ref == 'refs/heads/main' # Deploy only when pushing to main
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug EC2 Host
        run: |
          echo "EC2 Host: ${EC2_HOST:0:10}********"

      - name: Check EC2 Connection
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: "ec2-user"
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key  # Save private key

          # Ensure EC2_HOST is set
          if [ -z "$HOST" ]; then
            echo "‚ùå ERROR: EC2_HOST is empty!"
            exit 1
          fi

          # Test SSH Connection
          echo "üîç Testing SSH Connection..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i private_key $USER@$HOST "echo '‚úÖ SSH Connection Successful!'"

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: "ec2-user"
        run: |
          echo "üöÄ Transferring Files to EC2..."

          # Use rsync to exclude .git and set correct permissions
          rsync -avz --exclude '.git' -e "ssh -o StrictHostKeyChecking=no -i private_key" . $USER@$HOST:/home/ec2-user/Not-Alone

          echo "üîß Running Deployment Commands on EC2..."
          ssh -o StrictHostKeyChecking=no -i private_key $USER@$HOST << 'EOF'
            sudo chown -R ec2-user:ec2-user /home/ec2-user/Not-Alone  # Ensure proper permissions
            cd /home/ec2-user/Not-Alone/Server  # Move into backend folder
            npm install  # Install dependencies
            pm2 stop all || true  # Stop any running backend services
            pm2 start npm --name "not-alone-backend" -- run start  # Start backend service
          EOF

  # ‚úÖ JOB 5: Notify on Discord After Deployment
# ‚úÖ JOB 5: Notify on Discord After Deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy_frontend, deploy_backend] # Only run after both deployments
    if: github.event_name == 'push' # Only notify when deployed
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }} # ‚úÖ Set webhook as environment variable
        with:
          args: "üöÄ Deployment of Not-Alone is complete! New version is live!"

