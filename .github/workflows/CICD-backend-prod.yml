name: Build and Deploy to ECS

on:
  # Trigger on push to main (for deploy)
  push:
    branches:
      - main
    paths:
      - "Server/**"
  # Trigger on pull request to main (for test)
  pull_request:
    branches:
      - main
    paths:
      - "Server/**"

jobs:
  # -----------------------------
  # 1) TEST job (runs on PR only)
  # -----------------------------
  test:
    # Runs only for PR events to main
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Get the latest code from the repo

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18" # Ensure we're using Node.js 18

      - name: Install MongoDB CLI (Ubuntu 22.04)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl

          # Correctly Add MongoDB's Updated GPG Key
          curl -fsSL https://pgp.mongodb.com/server-7.0.asc | sudo gpg --dearmor -o /usr/share/keyrings/mongodb-server-keyring.gpg

          # Add MongoDB APT Repository (Official MongoDB Source)
          echo "deb [signed-by=/usr/share/keyrings/mongodb-server-keyring.gpg] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list

          sudo apt-get update
          sudo apt-get install -y mongodb-org-shell mongodb-mongosh

      - name: Verify MongoDB Installation
        run: |
          mongosh --version
          mongo --version || echo "❌ Warning: Legacy MongoDB shell is not installed."

      - name: Install Backend Dependencies # Install backend dependencies
        run: |
          cd Server
          npm install

      - name: Check & Log Environment Variables
        run: |
          echo "Checking required secrets..."
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then echo "❌ MISSING: JWT_SECRET"; fi
          if [ -z "${{ secrets.PASSWORD_KEY }}" ]; then echo "❌ MISSING: PASSWORD_KEY"; fi
          if [ -z "${{ secrets.MONGODB_URI_TEST }}" ]; then echo "❌ MISSING: MONGODB_URI_TEST"; fi
          if [ -z "${{ secrets.SMTP_HOST }}" ]; then echo "❌ MISSING: SMTP_HOST"; fi
          if [ -z "${{ secrets.SMTP_PORT }}" ]; then echo "❌ MISSING: SMTP_PORT"; fi
          if [ -z "${{ secrets.SMTP_USER }}" ]; then echo "❌ MISSING: SMTP_USER"; fi
          if [ -z "${{ secrets.SMTP_PASS }}" ]; then echo "❌ MISSING: SMTP_PASS"; fi
          if [ -z "${{ secrets.DEVICE_TOKEN_SECRET }}" ]; then echo "❌ MISSING: DEVICE_TOKEN_SECRET"; fi
          if [ -z "${{ secrets.ENCRYPTION_KEY }}" ]; then echo "❌ MISSING: ENCRYPTION_KEY"; fi

      - name: Set Environment Variables
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "PASSWORD_KEY=${{ secrets.PASSWORD_KEY }}" >> $GITHUB_ENV
          echo "MONGODB_URI_TEST=${{ secrets.MONGODB_URI_TEST }}" >> $GITHUB_ENV
          echo "SMTP_HOST='${{ secrets.SMTP_HOST }}'" >> $GITHUB_ENV
          echo "SMTP_PORT='${{ secrets.SMTP_PORT }}'" >> $GITHUB_ENV
          echo "SMTP_USER='${{ secrets.SMTP_USER }}'" >> $GITHUB_ENV
          echo "SMTP_PASS='${{ secrets.SMTP_PASS }}'" >> $GITHUB_ENV
          echo "DEVICE_TOKEN_SECRET='${{ secrets.DEVICE_TOKEN_SECRET }}'" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}'" >> $GITHUB_ENV

      - name: Debug MongoDB URI
        run: |
          echo "MongoDB URI: ${MONGODB_URI_TEST:0:20}********"  # Mask for security

      - name: Test MongoDB Connection
        run: |
          echo "Testing MongoDB connection..."
          echo "MongoDB URI: ${MONGODB_URI_TEST:0:20}********"  # Mask for security
          mongosh "$MONGODB_URI_TEST" --eval "db.runCommand({ connectionStatus: 1 })"

      - name: Run Backend Tests # Run backend tests
        run: |
          cd Server
          npm test

  #------------------------------------------
  # -----------------------------------------
  # 2) BUILD AND DEPLOY job (runs on push only)
  # -----------------------------------------
  build-and-deploy:
    # Runs only for push events to main
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            pwd
            cd Not-Alone
            pwd
            git remote set-url origin git@github.com:shalev396/Not-Alone.git
            git remote -v
            git pull origin main
            cd Server
            pwd
            docker build -t not-alone-backend -f dockerfile .
            docker stop not-alone-backend || true
            docker rm not-alone-backend || true
            docker run -d \
              --name not-alone-backend \
              --restart unless-stopped \
              -p 3000:3000 \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e PORT="${{ secrets.PORT }}" \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e NODE_ENV="${{ secrets.NODE_ENV }}" \
              -e PASSWORD_KEY="${{ secrets.PASSWORD_KEY }}" \
              -e MONGODB_URI_TEST="${{ secrets.MONGODB_URI_TEST }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
              -e SMTP_USER="${{ secrets.SMTP_USER }}" \
              -e SMTP_PASS="${{ secrets.SMTP_PASS }}" \
              -e DEVICE_TOKEN_SECRET="${{ secrets.DEVICE_TOKEN_SECRET }}" \
              -e ENCRYPTION_KEY="${{ secrets.ENCRYPTION_KEY }}" \
              not-alone-backend:latest
          EOF
  # ✅ JOB 3: Notify on Discord After Deployment
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-deploy] # Only run after both deployments
    if: github.event_name == 'push' # Notify only on deployment
    steps:
      - name: Send Discord Notification
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
            "username": "GitHub Actions",
            "content": "@everyone 🚀 **Deployment of Not-Alone is complete!**",
            "embeds": [
              {
                "title": "✅ Successful Deployment of Backend",
                "description": "New changes in **Not-Alone** deployed by **${{ github.actor }}**",
                "color": 5814783,
                "timestamp": "${{ github.event.head_commit.timestamp }}",
                "url": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}",
                "thumbnail": {
                  "url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
                },
                "author": {
                  "name": "${{ github.actor }}",
                  "url": "https://github.com/${{ github.actor }}",
                  "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
                },
                "fields": [
                  {
                    "name": "🔀 Repository",
                    "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                    "inline": true
                  },
                  {
                    "name": "📝 Commit",
                    "value": "[View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": true
                  },
                  {
                    "name": "👤 Deployed By",
                    "value": "${{ github.actor }}",
                    "inline": true
                  }
                ]
              }
            ]
          }' ${{ secrets.DISCORD_WEBHOOK }})
          echo "Webhook server response: $RESPONSE"
