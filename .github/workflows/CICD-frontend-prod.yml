name: CI/CD Pipeline # Name of the GitHub Actions Workflow

# üöÄ Workflow Triggers: Separate Testing & Deployment
on:
  pull_request:
    branches: [main] # Run tests & build when a PR is made to 'main'
  push:
    branches: [main] # Deploy when code is merged into 'main'

jobs:
  # ‚úÖ JOB 2: Build the Frontend (Acts as a Test)
  build:
    runs-on: ubuntu-latest
    # needs: test # Runs only if backend tests pass
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Frontend # Create the production build (output is in 'client/dist')
        run: |
          cd client
          npm run build

  # ‚úÖ JOB 3: Deploy Frontend to S3
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: build # Runs only if build is successful
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Rebuild Frontend # Ensure we have the latest build
        run: |
          cd client
          npm install  # Install dependencies
          npm run build # Build frontend

      - name: Ensure Frontend Build Directory Exists
        run: |
          if [ ! -d "client/dist" ]; then
            echo "‚ùå ERROR: Build directory client/dist does not exist!"
            exit 1
          fi

      - name: Deploy to S3 # Sync the built frontend files to the S3 bucket
        uses: jakejarvis/s3-sync-action@master # AWS S3 sync action
        with:
          args: --delete # Remove old files from S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} # S3 Bucket Name
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS Key
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS Secret
          AWS_REGION: "eu-central-1" # Change to your AWS region
          SOURCE_DIR: "client/dist/" # Only upload the CONTENTS of client/dist

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  # ‚úÖ JOB 3: Notify on Discord After Deployment
  notify:
    runs-on: ubuntu-latest
    needs: [deploy_frontend] # Only run after both deployments
    if: github.event_name == 'push' # Notify only on deployment
    steps:
      - name: Send Discord Notification
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
            "username": "GitHub Actions",
            "content": "@everyone üöÄ **Deployment of Not-Alone is complete!**",
            "embeds": [
              {
                "title": "‚úÖ Successful Deployment of Frontend",
                "description": "New changes in **Not-Alone** deployed by **${{ github.actor }}**",
                "color": 5814783,
                "timestamp": "${{ github.event.head_commit.timestamp }}",
                "url": "https://github.com/${{ github.repository }}/commit/${{ github.sha }}",
                "thumbnail": {
                  "url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
                },
                "author": {
                  "name": "${{ github.actor }}",
                  "url": "https://github.com/${{ github.actor }}",
                  "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor_id }}?v=4"
                },
                "fields": [
                  {
                    "name": "üîÄ Repository",
                    "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                    "inline": true
                  },
                  {
                    "name": "üìù Commit",
                    "value": "[View Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": true
                  },
                  {
                    "name": "üë§ Deployed By",
                    "value": "${{ github.actor }}",
                    "inline": true
                  }
                ]
              }
            ]
          }' ${{ secrets.DISCORD_WEBHOOK }})
          echo "Webhook server response: $RESPONSE"
